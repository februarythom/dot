
FROM node:10-alpine AS builder

# set working directory
WORKDIR /app

# install and cache app dependencies
COPY *.json *.js ./

RUN npm install --silent && npm cache clean -f

# add `/app/node_modules/.bin` to $PATH
ENV PATH /app/node_modules/.bin:$PATH

# add app
# COPY . /app

EXPOSE 3030

# start app
CMD ["npm", "run", "start-dev"]


# # ! Important
# # Since we rely in our code to environment variables for e.g. db connection
# # this can only be run successfully with docker-compose file

# # Specify node version and choose image
# # also name our image as development (can be anything)
# FROM node:14 AS development

# # Specify our working directory, this is in our container/in our image
# WORKDIR /thomas/src/app

# # Copy the package.jsons from host to container
# # A wildcard is used to ensure both package.json AND package-lock.json are copied
# COPY package*.json ./

# # Here we install all the deps
# RUN npm install

# # Bundle app source / copy all other files
# COPY . .

# # Build the app to the /dist folder
# RUN npm run build

# ################
# ## PRODUCTION ##
# ################
# # Build another image named production
# FROM node:14 AS production

# # Set node env to prod
# ARG NODE_ENV=production
# ENV NODE_ENV=${NODE_ENV}

# # Set Working Directory
# WORKDIR /thomas/src/app

# # Copy all from development stage
# COPY --from=development /thomas/src/app/ .

# EXPOSE 8080

# # Run app
# CMD [ "node", "dist/main"
